{"ast":null,"code":"var _jsxFileName = \"/Users/hshchu/Desktop/github/e-commerce/src/components/Session/withAuthentication.js\";\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'recompose';\nimport AuthUserContext from './context';\nimport { withFirebase } from '../Firebase';\nimport * as ROUTES from '../../constants/routes';\n\nconst withAuthentication = condition => Component => {\n  class WithAuthentication extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        authUser: JSON.parse(localStorage.getItem('authUser'))\n      };\n    }\n\n    componentDidMount() {\n      this.listener = this.props.firebase.onAuthUserListener(authUser => {\n        localStorage.setItem('authUser', JSON.stringify(authUser));\n        this.setState({\n          authUser\n        });\n      }, () => {\n        localStorage.removeItem('authUser');\n        this.setState({\n          authUser: null\n        });\n      });\n    }\n\n    componentWillUnmount() {\n      this.listener();\n    }\n\n    render() {\n      return (// <AuthUserContext.Provider value={this.state.authUser}>\n        //   <Component {...this.props} />\n        // </AuthUserContext.Provider>\n        React.createElement(AuthUserContext.Provider, {\n          value: this.state.authUser,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        }, React.createElement(Component, Object.assign({}, this.props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        })))\n      );\n    }\n\n  }\n\n  return compose(withRouter, withFirebase)(WithAuthentication);\n};\n\nexport default withAuthentication;\n/*\nexport default withAuthentication;\nimport React, { useEffect } from 'react';\nimport { compose } from 'recompose';\n\nimport AuthUserContext from './context';\nimport { withFirebase } from '../Firebase';\n\n\n\n\n\n\n\n\nconst withAuthentication = Component => {\n  const WithAuthentication = (props) => {\n    const [authUser, setAuthUser] = React.useState(null);\n    const [listener, setListener] = React.useState(null);\n\n    useEffect( () => {\n      const setListener = props.firebase.auth.onAuthStateChanged(u => {u ? setAuthUser(u) : setAuthUser(null);} );\n    }, []); // \n\n    return(\n    <AuthUserContext.Provider value={authUser}>\n      <AuthUserContext.Consumer>\n        {authUser => <Component {...props} authUser={authUser}/>}\n      </AuthUserContext.Consumer>  \n    </AuthUserContext.Provider>  \n    );\n\n  }\n  return compose(withFirebase)(WithAuthentication);\n}\n\nexport default withAuthentication;\n*/","map":{"version":3,"sources":["/Users/hshchu/Desktop/github/e-commerce/src/components/Session/withAuthentication.js"],"names":["React","withRouter","compose","AuthUserContext","withFirebase","ROUTES","withAuthentication","condition","Component","WithAuthentication","constructor","props","state","authUser","JSON","parse","localStorage","getItem","componentDidMount","listener","firebase","onAuthUserListener","setItem","stringify","setState","removeItem","componentWillUnmount","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,OAAT,QAAwB,WAAxB;AAEA,OAAOC,eAAP,MAA4B,WAA5B;AACA,SAASC,YAAT,QAA6B,aAA7B;AACA,OAAO,KAAKC,MAAZ,MAAwB,wBAAxB;;AAEA,MAAMC,kBAAkB,GAAGC,SAAS,IAAIC,SAAS,IAAI;AACnD,QAAMC,kBAAN,SAAiCT,KAAK,CAACQ,SAAvC,CAAiD;AAC/CE,IAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,YAAMA,KAAN;AAEA,WAAKC,KAAL,GAAa;AACXC,QAAAA,QAAQ,EAAEC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX;AADC,OAAb;AAGD;;AAEDC,IAAAA,iBAAiB,GAAG;AAClB,WAAKC,QAAL,GAAgB,KAAKR,KAAL,CAAWS,QAAX,CAAoBC,kBAApB,CACdR,QAAQ,IAAI;AACVG,QAAAA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCR,IAAI,CAACS,SAAL,CAAeV,QAAf,CAAjC;AACA,aAAKW,QAAL,CAAc;AAAEX,UAAAA;AAAF,SAAd;AACD,OAJa,EAKd,MAAM;AACJG,QAAAA,YAAY,CAACS,UAAb,CAAwB,UAAxB;AACA,aAAKD,QAAL,CAAc;AAAEX,UAAAA,QAAQ,EAAE;AAAZ,SAAd;AACD,OARa,CAAhB;AAUD;;AAEDa,IAAAA,oBAAoB,GAAG;AACrB,WAAKP,QAAL;AACD;;AAEDQ,IAAAA,MAAM,GAAG;AACP,aACE;AACA;AACA;AACA,4BAAC,eAAD,CAAiB,QAAjB;AAA0B,UAAA,KAAK,EAAE,KAAKf,KAAL,CAAWC,QAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,SAAD,oBAAe,KAAKF,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAJF;AAQD;;AAnC8C;;AAsCjD,SAAOT,OAAO,CACZD,UADY,EAEZG,YAFY,CAAP,CAGLK,kBAHK,CAAP;AAID,CA3CD;;AA6CA,eAAeH,kBAAf;AAGA","sourcesContent":["import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'recompose';\n\nimport AuthUserContext from './context';\nimport { withFirebase } from '../Firebase';\nimport * as ROUTES from '../../constants/routes';\n\nconst withAuthentication = condition => Component => {\n  class WithAuthentication extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        authUser: JSON.parse(localStorage.getItem('authUser')),\n      };\n    }\n\n    componentDidMount() {\n      this.listener = this.props.firebase.onAuthUserListener(\n        authUser => {\n          localStorage.setItem('authUser', JSON.stringify(authUser));\n          this.setState({ authUser });\n        },\n        () => {\n          localStorage.removeItem('authUser');\n          this.setState({ authUser: null });\n        },\n      );\n    }\n\n    componentWillUnmount() {\n      this.listener();\n    }\n\n    render() {\n      return (\n        // <AuthUserContext.Provider value={this.state.authUser}>\n        //   <Component {...this.props} />\n        // </AuthUserContext.Provider>\n        <AuthUserContext.Provider value={this.state.authUser}>\n          <Component {...this.props} />\n        </AuthUserContext.Provider>\n      );\n    }\n  }\n\n  return compose(\n    withRouter,\n    withFirebase,\n  )(WithAuthentication);\n};\n\nexport default withAuthentication;\n\n\n/*\nexport default withAuthentication;\nimport React, { useEffect } from 'react';\nimport { compose } from 'recompose';\n\nimport AuthUserContext from './context';\nimport { withFirebase } from '../Firebase';\n\n\n\n\n\n\n\n\nconst withAuthentication = Component => {\n  const WithAuthentication = (props) => {\n    const [authUser, setAuthUser] = React.useState(null);\n    const [listener, setListener] = React.useState(null);\n\n    useEffect( () => {\n      const setListener = props.firebase.auth.onAuthStateChanged(u => {u ? setAuthUser(u) : setAuthUser(null);} );\n    }, []); // \n\n    return(\n    <AuthUserContext.Provider value={authUser}>\n      <AuthUserContext.Consumer>\n        {authUser => <Component {...props} authUser={authUser}/>}\n      </AuthUserContext.Consumer>  \n    </AuthUserContext.Provider>  \n    );\n\n  }\n  return compose(withFirebase)(WithAuthentication);\n}\n\nexport default withAuthentication;\n*/"]},"metadata":{},"sourceType":"module"}