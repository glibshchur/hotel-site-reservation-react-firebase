{"ast":null,"code":"import _slicedToArray from \"/Users/hshchu/Desktop/github/e-commerce/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/hshchu/Desktop/github/e-commerce/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nimport 'firebase/storage';\nimport { debug } from 'util';\nimport guid from 'guid';\nconst config = {\n  apiKey: \"AIzaSyAUe7EG7XatBVCPrVmwT79O4OKYasGKuqA\",\n  authDomain: \"bestforrest-bc994.firebaseapp.com\",\n  databaseURL: \"https://bestforrest-bc994.firebaseio.com\",\n  projectId: \"bestforrest-bc994\",\n  storageBucket: \"bestforrest-bc994.appspot.com\",\n  messagingSenderId: \"492297820708\",\n  appId: \"1:492297820708:web:1e3b0de06f9cb3538516b1\",\n  measurementId: \"G-N2HJSMN003\"\n};\n\nclass Firebase {\n  constructor() {\n    this.doCreateUserWithEmailAndPassword = (email, password) => this.auth.createUserWithEmailAndPassword(email, password);\n\n    this.doSignInWithEmailAndPassword = (email, password) => this.auth.signInWithEmailAndPassword(email, password);\n\n    this.doSignOut = () => this.auth.signOut();\n\n    this.doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n    this.doPasswordUpdate = password => this.auth.currentUser.updatePassword(password);\n\n    this.user = uid => this.db.ref(\"users/\".concat(uid));\n\n    this.users = () => this.db.ref('users');\n\n    this.category = uid => this.db.ref(\"categories/\".concat(uid));\n\n    this.categories = () => this.db.ref(\"categories\");\n\n    this.archive = () => this.db.ref(\"archive\");\n\n    this.archivedProduct = uid => this.db.ref(\"archive/\".concat(uid));\n\n    this.createOrder = (cart, user) => {\n      if (!!!cart || cart.length == 0 || !user) {\n        console.log(cart);\n        return Promise.reject(new Error(\"Invalid cart\"));\n      }\n\n      let promises = [];\n      cart.forEach(e => {\n        let ref = this.db.ref('orders').push();\n        console.log(ref);\n        promises.push(ref.set(_objectSpread({}, user, {\n          productId: e.key,\n          purchaseTime: Date.now()\n        })));\n      });\n      return Promise.all(promises);\n    };\n\n    this.onAuthUserListener = (next, fallback) => this.auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        this.user(authUser.uid).once('value').then(snapshot => {\n          const dbUser = snapshot.val(); // merge auth and db user\n\n          authUser = _objectSpread({\n            uid: authUser.uid,\n            email: authUser.email\n          }, dbUser); // check if user is admin\n\n          this.db.ref(\"admins/\".concat(authUser.uid, \"/isAdmin\")).once('value').then(snapshot => {\n            if (snapshot.exists()) {\n              authUser = _objectSpread({\n                isAdmin: true\n              }, authUser);\n            }\n          }).then(() => {\n            next(authUser);\n          });\n        });\n      } else {\n        fallback();\n      }\n    });\n\n    this.productRef = () => this.db.ref(\"products\");\n\n    this.categoryRef = () => this.db.ref(\"categories\");\n\n    this.subCategoryRef = () => this.db.ref(\"categories/subCategories\");\n\n    this.getSubCategories = categoryName => {};\n\n    this.product = uid => this.db.ref(\"products/\".concat(uid));\n\n    this.deleteCategory = (category, subCategory) => {\n      let productRef;\n      console.log(category + \" \" + subCategory);\n\n      if (!!!subCategory) {\n        productRef = this.products().orderByChild(\"category\").equalTo(category);\n        this.db.ref(\"categories/\".concat(category)).remove();\n      } else {\n        productRef = this.products().orderByChild(\"categoryId\").equalTo(\"\".concat(category, \"/\").concat(subCategory));\n        this.db.ref(\"categories/\".concat(category, \"/subCategories/\").concat(subCategory)).remove();\n      }\n\n      productRef.once('value', snapshot => {\n        snapshot.forEach(c => {\n          console.log(c.key);\n          this.archiveProduct(c.key);\n        });\n      });\n    };\n\n    this.setCategoryVisible = (category, subcategory, visible) => {\n      let update = {\n        visible\n      };\n\n      if (subcategory == null) {\n        let ref = this.db.ref(\"categories/\".concat(category));\n        ref.update(update);\n      } else {\n        console.log('asd');\n        this.db.ref(\"categories/\".concat(category, \"/subCategories/\").concat(subcategory)).update(update);\n      }\n    };\n\n    this.archiveProduct = uid => {\n      this.product(uid).once('value', snapshot => {\n        if (snapshot.exists()) {\n          this.db.ref(\"archive/\".concat(uid)).set(snapshot.val()).then(() => this.product(uid).remove());\n        }\n      });\n    };\n\n    this.editProduct = (uid, val) => {\n      let updates = {};\n\n      for (let _ref of Object.entries(val)) {\n        var _ref2 = _slicedToArray(_ref, 2);\n\n        let key = _ref2[0];\n        let value = _ref2[1];\n\n        if ((key == 'previewImage' || key == 'subImageOneRef' || key == \"subImageTwoRef \") && value != null && value[0]) {\n          console.log(value);\n          console.log(value[0]);\n          let ref = guid.create().value;\n          this.storage.ref().child(ref).put(value[0]);\n          updates[key] = ref;\n        } else if (value != null) {\n          updates[key] = value;\n        }\n      }\n\n      console.log(updates);\n      this.createCategory(val.category, val.subCategory);\n      updates['categoryId'] = this.getCategoryId(val.category, val.subCategory);\n      return this.product(uid).update(updates);\n    };\n\n    this.createProductWithCategory = (category, subCategory) => {\n      this.createProduct({\n        category,\n        subCategory,\n        tags: '',\n        name: \"Новий Номер\",\n        description: \"Опис...\",\n        details: '',\n        price: 0,\n        previewImage: null,\n        subImageOne: null,\n        subImageTwo: null,\n        isPublic: false,\n        model: ''\n      });\n    };\n\n    this.getCategoryId = (category, subCategory) => \"\".concat(category, \"/\").concat(subCategory);\n\n    this.deleteArchivedProduct = uid => {\n      this.archivedProduct(uid).once('value', snapshot => {\n        this.storage.ref().child(snapshot.val().previewImage).delete();\n        this.storage.ref().child(snapshot.val().subImageOne).delete();\n        this.storage.ref().child(snapshot.val().subImageTwo).delete();\n      });\n      return this.archivedProduct(uid).remove();\n    };\n\n    this.deleteProduct = uid => {\n      this.product(uid).once('value', snapshot => {\n        this.storage.ref().child(snapshot.val().previewImage).delete();\n        this.storage.ref().child(snapshot.val().subImageOne).delete();\n        this.storage.ref().child(snapshot.val().subImageTwo).delete();\n      });\n      return this.product(uid).remove();\n    };\n\n    this.restoreArchivedProduct = uid => {\n      //when restoring a product set visible to false\n      this.db.ref(\"archive/\".concat(uid)).once('value', snapshot => {\n        this.restoreProduct(snapshot.val()).then(() => {\n          this.db.ref(\"archive/\".concat(uid)).remove();\n        });\n      });\n    };\n\n    this.restoreProduct = product => {\n      try {\n        const category = product.category,\n              subCategory = product.subCategory,\n              name = product.name,\n              description = product.description,\n              details = product.details,\n              price = product.price,\n              previewImage = product.previewImage,\n              subImageOne = product.subImageOne,\n              subImageTwo = product.subImageTwo,\n              isPublic = product.isPublic; //model = product;\n\n        let ref = this.categoryRef().child(\"\".concat(product.category, \"/subCategories/\").concat(product.subCategory)); // Check if category/subcategory exists\n\n        return ref.once(\"value\").then(snapshot => {\n          if (!snapshot.exists()) {\n            //console.log(snapshot.key);\n            // Create new category if it doesent already exist\n            return this.createCategory(product.category, product.subCategory);\n          }\n        }) // create the product\n        .then(() => {\n          this.productRef().push().set({\n            categoryId: this.getCategoryId(category, subCategory),\n            category,\n            subCategory,\n            //tags,\n            name,\n            description,\n            details,\n            price,\n            previewImage,\n            subImageOne,\n            subImageTwo,\n            isPublic: false //model\n\n          });\n        });\n      } catch (err) {\n        return Promise.reject(new Error(err));\n      }\n    };\n\n    this.createProduct = product => {\n      console.log(product);\n\n      try {\n        const category = product.category,\n              subCategory = product.subCategory,\n              name = product.name,\n              description = product.description,\n              details = product.details,\n              price = product.price,\n              previewImage = product.previewImage,\n              subImageOne = product.subImageOne,\n              subImageTwo = product.subImageTwo,\n              isPublic = product.isPublic; //model\n\n        let ref = this.categoryRef().child(\"\".concat(product.category, \"/subCategories/\").concat(product.subCategory));\n        let imageRef = \"null.jpg\"; // default image refs, if no image is selected\n\n        let previewImageRef = \"null.jpg\";\n        let subImageOneRef = \"null.jpg\";\n        let subImageTwoRef = \"null.jpg\"; // Check if category/subcategory exists\n\n        return ref.once(\"value\").then(snapshot => {\n          if (!snapshot.exists()) {\n            //console.log(snapshot.key);\n            // Create new category if it doesent already exist\n            return this.createCategory(product.category, product.subCategory);\n          }\n        }).then(() => {\n          let promises = []; // upload the images to firebase storage\n\n          if (previewImage != null && previewImage[0]) {\n            previewImageRef = guid.create().value;\n            promises.push(this.storage.ref().child(previewImageRef).put(previewImage[0]));\n          }\n\n          if (subImageOne != null && subImageOne[0]) {\n            subImageOneRef = guid.create().value;\n            promises.push(this.storage.ref().child(subImageOneRef).put(subImageOne[0]));\n          }\n\n          if (subImageTwo != null && subImageTwo[0]) {\n            subImageTwoRef = guid.create().value;\n            promises.push(this.storage.ref().child(subImageTwoRef).put(subImageTwo[0]));\n          }\n\n          return Promise.all(promises);\n        }) // create the product\n        .then(() => {\n          this.productRef().push().set({\n            categoryId: this.getCategoryId(category, subCategory),\n            category,\n            subCategory,\n            //tags,\n            name,\n            description,\n            details,\n            price,\n            previewImage: previewImageRef,\n            subImageOne: subImageOneRef,\n            subImageTwo: subImageTwoRef,\n            isPublic //model\n\n          });\n        });\n      } catch (err) {\n        return Promise.reject(new Error(err));\n      }\n    };\n\n    this.createCategory = (category, subCategory) => {\n      try {\n        let ref = this.categoryRef().child(category);\n        let childRef = ref.child(\"subCategories/\".concat(subCategory));\n        return ref.once(\"value\").then(snapshot => {\n          if (snapshot.exists() && snapshot.child(\"subCategories/\".concat(subCategory)).exists()) {\n            throw \"Дана категорія уже існує!\";\n          } else {\n            if (!!category && !snapshot.exists()) ref.set({\n              visible: \"true\"\n            });\n            if (!!subCategory) childRef.set({\n              visible: \"true\",\n              id: \"\".concat(category, \"/\").concat(subCategory)\n            });\n          }\n        });\n      } catch (err) {\n        return Promise.reject(new Error(err));\n      }\n    };\n\n    this.orders = () => this.db.ref('orders');\n\n    this.order = uid => this.db.ref(\"orders/\".concat(uid));\n\n    this.product = uid => this.db.ref(\"products/\".concat(uid));\n\n    this.products = () => this.db.ref(\"products\");\n\n    app.initializeApp(config);\n    this.db = app.database();\n    this.auth = app.auth();\n    this.storage = app.storage();\n  }\n  /*\n     User - id, role, name, cart\n     Category - id, name, isSubCategory\n     Tag - id, name\n     Product - id, Category, SubCategory, Tags, description, price,  \n  */\n\n\n}\n\nexport default Firebase;","map":{"version":3,"sources":["/Users/hshchu/Desktop/github/e-commerce/src/components/Firebase/Firebase.js"],"names":["app","debug","guid","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Firebase","constructor","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","currentUser","updatePassword","user","uid","db","ref","users","category","categories","archive","archivedProduct","createOrder","cart","length","console","log","Promise","reject","Error","promises","forEach","e","push","set","productId","key","purchaseTime","Date","now","all","onAuthUserListener","next","fallback","onAuthStateChanged","authUser","once","then","snapshot","dbUser","val","exists","isAdmin","productRef","categoryRef","subCategoryRef","getSubCategories","categoryName","product","deleteCategory","subCategory","products","orderByChild","equalTo","remove","c","archiveProduct","setCategoryVisible","subcategory","visible","update","editProduct","updates","Object","entries","value","create","storage","child","put","createCategory","getCategoryId","createProductWithCategory","createProduct","tags","name","description","details","price","previewImage","subImageOne","subImageTwo","isPublic","model","deleteArchivedProduct","delete","deleteProduct","restoreArchivedProduct","restoreProduct","categoryId","err","imageRef","previewImageRef","subImageOneRef","subImageTwoRef","childRef","id","orders","order","initializeApp","database"],"mappings":"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","sourcesContent":["import app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database'\nimport 'firebase/storage'\nimport { debug } from 'util';\nimport  guid  from 'guid';\n\nconst config = {\n  apiKey: \"AIzaSyAUe7EG7XatBVCPrVmwT79O4OKYasGKuqA\",\n  authDomain: \"bestforrest-bc994.firebaseapp.com\",\n  databaseURL: \"https://bestforrest-bc994.firebaseio.com\",\n  projectId: \"bestforrest-bc994\",\n  storageBucket: \"bestforrest-bc994.appspot.com\",\n  messagingSenderId: \"492297820708\",\n  appId: \"1:492297820708:web:1e3b0de06f9cb3538516b1\",\n  measurementId: \"G-N2HJSMN003\"\n};\n\nclass Firebase {\n  constructor() {\n    app.initializeApp(config);\n    this.db = app.database();\n    this.auth = app.auth();\n    this.storage = app.storage();\n  }\n\n  doCreateUserWithEmailAndPassword = (email, password) =>\n    this.auth.createUserWithEmailAndPassword(email, password);\n\n  doSignInWithEmailAndPassword = (email, password) =>\n    this.auth.signInWithEmailAndPassword(email, password);\n\n  doSignOut = () => this.auth.signOut();\n\n  doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n  doPasswordUpdate = password =>\n    this.auth.currentUser.updatePassword(password);\n\n  user = uid => this.db.ref(`users/${uid}`); \n\n  users = () => this.db.ref('users');\n  \n  category = uid => this.db.ref(`categories/${uid}`);\n\n  categories = () => this.db.ref(\"categories\");\n\n  archive = () => this.db.ref(\"archive\");\n\n  archivedProduct = (uid) => this.db.ref(`archive/${uid}`); \n\n\n  createOrder = (cart, user) => {\n\n    if(!!!cart || cart.length == 0 || !user){\n      console.log(cart);\n\n      return Promise.reject(new Error(\"Invalid cart\"));\n    }\n      \n    let promises = [];\n\n    cart.forEach(e => {\n      let ref = this.db.ref('orders').push();\n\n      console.log(ref);\n\n      promises.push(ref.set({\n        ...user,\n        productId:e.key,\n        purchaseTime:Date.now(),     \n      }))\n    })\n\n    return Promise.all(promises);\n\n  }\n\n  onAuthUserListener = (next, fallback) =>\n    \n    this.auth.onAuthStateChanged(authUser => {\n     \n      if (authUser) {\n        \n        this.user(authUser.uid)\n          .once('value')\n          .then(snapshot => {\n            const dbUser = snapshot.val();\n            \n            // merge auth and db user\n            authUser = {\n              uid: authUser.uid,\n              email: authUser.email,\n              //emailVerified: authUser.emailVerified,\n              //providerData: authUser.providerData,\n              ...dbUser,\n            };\n            \n            // check if user is admin\n            this.db.ref(`admins/${authUser.uid}/isAdmin`).once('value').then(snapshot => {\n              if(snapshot.exists()){\n                authUser = {\n                  isAdmin: true,\n                  ...authUser\n                }\n              }\n            }).then(() => {\n              next(authUser);\n            })         \n          });\n      } else {\n        fallback();\n      }\n    });\n    \n  \n  productRef = () => this.db.ref(\"products\");\n\n  categoryRef = () => this.db.ref(\"categories\");\n\n  subCategoryRef = () => this.db.ref(\"categories/subCategories\");\n\n  getSubCategories = (categoryName) => {\n    \n  }\n\n  product = (uid) => this.db.ref(`products/${uid}`);\n\n  deleteCategory = (category, subCategory) =>{\n\n    let productRef;\n    console.log(category + \" \" + subCategory);\n\n    if(!!!subCategory){\n      productRef = \n        this.products()\n          .orderByChild(\"category\")\n          .equalTo(category);\n\n          this.db.ref(`categories/${category}`).remove();\n    }\n    else{\n      productRef = \n        this.products()\n          .orderByChild(\"categoryId\")\n          .equalTo(`${category}/${subCategory}`);\n\n      this.db.ref(`categories/${category}/subCategories/${subCategory}`).remove();\n    }\n\n    productRef.once('value', (snapshot) => {\n      snapshot.forEach(c => {\n        console.log(c.key);\n        this.archiveProduct(c.key);\n      })\n    })\n  }\n\n  setCategoryVisible = (category, subcategory, visible) => {\n    let update = {visible};\n\n    if(subcategory == null){\n      let ref = this.db.ref(`categories/${category}`);\n      ref.update(update);\n    }\n    else{\n      console.log('asd');\n      this.db.ref(`categories/${category}/subCategories/${subcategory}`).update(update);\n    }\n    \n  } \n  \n  archiveProduct = (uid) =>{\n    this.product(uid).once('value', (snapshot) =>{\n      if(snapshot.exists()){\n        this.db.ref(`archive/${uid}`).set(snapshot.val())\n         .then(() => this.product(uid).remove())      \n      }\n    })\n  }\n\n  //TODO:[Validation]\n  editProduct = (uid, val) => {\n    let updates = {};\n\n    for(let [key, value] of Object.entries(val)){\n\n      if((key == 'previewImage' || key == 'subImageOneRef' || key == \"subImageTwoRef \") && value != null && value[0]){\n        console.log(value);\n        console.log(value[0]);\n        \n        let ref = guid.create().value;\n        this.storage.ref().child(ref).put(value[0])\n        updates[key] = ref;\n      }\n      else if(value != null){\n        updates[key] = value\n      }\n      \n    }\n\n    \n    console.log(updates);\n\n    this.createCategory(val.category, val.subCategory)\n    updates['categoryId'] = this.getCategoryId(val.category, val.subCategory)\n\n    return this.product(uid).update(updates);\n  }\n\n  createProductWithCategory = (category, subCategory) => {\n    this.createProduct({\n      category,\n      subCategory,\n      tags:'',\n      name:\"Новий Номер\",\n      description:\"Опис...\",\n      details:'',\n      price:0,\n      previewImage:null,\n      subImageOne:null,\n      subImageTwo:null,\n      isPublic:false,\n      model:''\n    });\n  }\n\n  //getCategoryId = (product) => !!product ? this.getCategoryId(product.category, product.subCategory) : \"\";\n  getCategoryId = (category, subCategory) => `${category}/${subCategory}`;\n\n\n\n  deleteArchivedProduct = (uid) => {\n    this.archivedProduct(uid).once('value', snapshot => {\n      this.storage.ref().child(snapshot.val().previewImage).delete();\n      this.storage.ref().child(snapshot.val().subImageOne).delete();\n      this.storage.ref().child(snapshot.val().subImageTwo).delete();\n    });\n\n    return this.archivedProduct(uid).remove();\n  }\n\n  deleteProduct = (uid) => {\n\n    this.product(uid).once('value', snapshot => {\n      this.storage.ref().child(snapshot.val().previewImage).delete();\n      this.storage.ref().child(snapshot.val().subImageOne).delete();\n      this.storage.ref().child(snapshot.val().subImageTwo).delete();\n    });\n\n    return this.product(uid).remove();\n  }\n\n    //restores archived product\n  restoreArchivedProduct = (uid) => {\n    \n      //when restoring a product set visible to false\n      this.db.ref(`archive/${uid}`).once('value', (snapshot) => {\n          this.restoreProduct(snapshot.val()).then(()=> {\n            this.db.ref(`archive/${uid}`).remove();\n          })\n      })\n    }\n\n  restoreProduct = (product) => {\n\n    try{\n\n      const {\n        category,\n        subCategory,\n        //tags,\n        name,\n        description,\n        details,\n        price,\n        previewImage,\n        subImageOne,\n        subImageTwo,\n        isPublic} = product;\n        //model = product;\n\n      let ref = this.categoryRef().child(`${product.category}/subCategories/${product.subCategory}`);\n\n\n      // Check if category/subcategory exists\n      return ref.once(\"value\")\n        .then((snapshot) => {\n          if(!snapshot.exists()) {\n            //console.log(snapshot.key);\n            // Create new category if it doesent already exist\n            return this.createCategory(product.category, product.subCategory)\n          }\n        })      \n        // create the product\n        .then(() => {\n\n          this.productRef().push().set({\n            categoryId:this.getCategoryId(category,subCategory),\n            category,\n            subCategory,\n            //tags,\n            name,\n            description,\n            details,\n            price,\n            previewImage,\n            subImageOne,\n            subImageTwo,\n            isPublic:false\n            //model\n          })\n        })\n    }\n    catch (err){     \n      return Promise.reject(new Error(err));\n    }\n  }\n\n  createProduct = (product) => {\n\n    console.log(product);\n\n    try{\n\n      const {\n        category,\n        subCategory,\n        //tags,\n        name,\n        description,\n        details,\n        price,\n        previewImage,\n        subImageOne,\n        subImageTwo,\n        isPublic} = product;\n        //model\n\n      let ref = this.categoryRef().child(`${product.category}/subCategories/${product.subCategory}`);\n      let imageRef = \"null.jpg\" \n\n      // default image refs, if no image is selected\n      let previewImageRef = \"null.jpg\"; \n      let subImageOneRef = \"null.jpg\";\n      let subImageTwoRef = \"null.jpg\";\n\n      // Check if category/subcategory exists\n      return ref.once(\"value\")\n        .then((snapshot) => {\n          if(!snapshot.exists()) {\n            //console.log(snapshot.key);\n            // Create new category if it doesent already exist\n            return this.createCategory(product.category, product.subCategory)\n          }\n        })      \n        .then(() => {\n\n          let promises = []\n\n          // upload the images to firebase storage\n          if(previewImage != null && previewImage[0]){\n            \n            previewImageRef = guid.create().value;               \n            promises.push(this.storage.ref().child(previewImageRef).put(previewImage[0]))\n          }\n          if(subImageOne != null && subImageOne[0]) {\n            subImageOneRef = guid.create().value;\n            promises.push(this.storage.ref().child(subImageOneRef).put(subImageOne[0]));\n          }\n          if(subImageTwo != null && subImageTwo[0]) {\n            subImageTwoRef = guid.create().value;\n            promises.push(this.storage.ref().child(subImageTwoRef).put(subImageTwo[0]));\n          }\n\n          return Promise.all(promises);\n        })\n        // create the product\n        .then(() => {\n\n          this.productRef().push().set({\n            categoryId:this.getCategoryId(category,subCategory),\n            category,\n            subCategory,\n            //tags,\n            name,\n            description,\n            details,\n            price,\n            previewImage:previewImageRef,\n            subImageOne:subImageOneRef,\n            subImageTwo:subImageTwoRef,\n            isPublic\n            //model\n          })\n        })\n    }\n    catch (err){     \n      return Promise.reject(new Error(err));\n    }\n  }\n\n  createCategory = (category, subCategory) =>{\n    try{\n      let ref = this.categoryRef().child(category);\n      let childRef = ref.child(`subCategories/${subCategory}`);\n\n      return ref.once(\"value\")\n        .then((snapshot) => {\n          if(snapshot.exists() && snapshot.child(`subCategories/${subCategory}`).exists()){\n            throw \"Дана категорія уже існує!\"\n          }\n          else{\n\n            if(!!category && !snapshot.exists())\n              ref.set({visible:\"true\"});\n\n            if(!!subCategory)\n              childRef.set({visible:\"true\", id:`${category}/${subCategory}`});\n          }\n        })   \n    }\n    catch(err){\n      return Promise.reject(new Error(err));\n    }\n  }\n\n\n  orders = () => this.db.ref('orders');\n\n  order = uid => this.db.ref(`orders/${uid}`);\n\n  product = uid => this.db.ref(`products/${uid}`);\n\n  products = () => this.db.ref(\"products\");\n  \n  /*\n     User - id, role, name, cart\n     Category - id, name, isSubCategory\n     Tag - id, name\n     Product - id, Category, SubCategory, Tags, description, price,  \n  */\n}\n\nexport default Firebase;"]},"metadata":{},"sourceType":"module"}