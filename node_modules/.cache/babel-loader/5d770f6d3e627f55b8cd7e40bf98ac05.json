{"ast":null,"code":"var _jsxFileName = \"/Users/hshchu/Desktop/github/e-commerce/src/components/Session/withAuthentication.js\";\n// import React from 'react';\n// import AuthUserContext from './context';\n// import { withFirebase } from '../Firebase';\n// const withAuthentication = Component => {\n//   class WithAuthentication extends React.Component {\n//     constructor(props) {\n//       super(props);\n//       this.state = {\n//         authUser: JSON.parse(localStorage.getItem('authUser')),\n//       };\n//     }\n//     componentDidMount() {\n//       this.listener = this.props.firebase.onAuthUserListener(\n//         authUser => {\n//           localStorage.setItem('authUser', JSON.stringify(authUser));\n//           this.setState({ authUser });\n//         },\n//         () => {\n//           localStorage.removeItem('authUser');\n//           this.setState({ authUser: null });\n//         },\n//       );\n//     }\n//     componentWillUnmount() {\n//       this.listener();\n//     }\n//     render() {\n//       return (\n//         <AuthUserContext.Provider value={this.state.authUser}>\n//           <Component {...this.props} />\n//         </AuthUserContext.Provider>\n//       );\n//     }\n//   }\n//   return withFirebase(WithAuthentication);\n// };\n// export default withAuthentication;\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'recompose';\nimport AuthUserContext from './context';\nimport { withFirebase } from '../Firebase';\nimport * as ROUTES from '../../constants/routes';\nimport { withAuthentication } from '.';\n\nconst withAuthorization = condition => Component => {\n  class WithAuthorization extends React.Component {\n    componentDidMount() {\n      this.listener = this.props.firebase.onAuthUserListener(authUser => {\n        if (!condition(authUser)) {\n          this.props.history.push(ROUTES.SIGN_IN);\n        }\n      }, () => {\n        this.props.history.push(ROUTES.SIGN_IN);\n      });\n    }\n\n    componentWillUnmount() {\n      this.listener();\n    }\n\n    render() {\n      return React.createElement(AuthUserContext.Consumer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, authUser => condition(authUser) ? React.createElement(Component, Object.assign({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      })) : null);\n    }\n\n  }\n\n  return compose(withRouter, withFirebase)(withAuthentication);\n};\n\nexport default withAuthentication;\n/*\nexport default withAuthentication;\nimport React, { useEffect } from 'react';\nimport { compose } from 'recompose';\n\nimport AuthUserContext from './context';\nimport { withFirebase } from '../Firebase';\n\n\n\n\n\n\n\n\nconst withAuthentication = Component => {\n  const WithAuthentication = (props) => {\n    const [authUser, setAuthUser] = React.useState(null);\n    const [listener, setListener] = React.useState(null);\n\n    useEffect( () => {\n      const setListener = props.firebase.auth.onAuthStateChanged(u => {u ? setAuthUser(u) : setAuthUser(null);} );\n    }, []); // \n\n    return(\n    <AuthUserContext.Provider value={authUser}>\n      <AuthUserContext.Consumer>\n        {authUser => <Component {...props} authUser={authUser}/>}\n      </AuthUserContext.Consumer>  \n    </AuthUserContext.Provider>  \n    );\n\n  }\n  return compose(withFirebase)(WithAuthentication);\n}\n\nexport default withAuthentication;\n*/","map":{"version":3,"sources":["/Users/hshchu/Desktop/github/e-commerce/src/components/Session/withAuthentication.js"],"names":["React","withRouter","compose","AuthUserContext","withFirebase","ROUTES","withAuthentication","withAuthorization","condition","Component","WithAuthorization","componentDidMount","listener","props","firebase","onAuthUserListener","authUser","history","push","SIGN_IN","componentWillUnmount","render"],"mappings":";AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,OAAT,QAAwB,WAAxB;AAEA,OAAOC,eAAP,MAA4B,WAA5B;AACA,SAASC,YAAT,QAA6B,aAA7B;AACA,OAAO,KAAKC,MAAZ,MAAwB,wBAAxB;AACA,SAASC,kBAAT,QAAmC,GAAnC;;AAIA,MAAMC,iBAAiB,GAAGC,SAAS,IAAIC,SAAS,IAAI;AAClD,QAAMC,iBAAN,SAAgCV,KAAK,CAACS,SAAtC,CAAgD;AAC9CE,IAAAA,iBAAiB,GAAG;AAElB,WAAKC,QAAL,GAAgB,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,kBAApB,CACdC,QAAQ,IAAI;AACV,YAAI,CAACR,SAAS,CAACQ,QAAD,CAAd,EAA0B;AACxB,eAAKH,KAAL,CAAWI,OAAX,CAAmBC,IAAnB,CAAwBb,MAAM,CAACc,OAA/B;AACD;AACF,OALa,EAOd,MAAM;AAAC,aAAKN,KAAL,CAAWI,OAAX,CAAmBC,IAAnB,CAAwBb,MAAM,CAACc,OAA/B;AAAwC,OAPjC,CAAhB;AAWD;;AAEDC,IAAAA,oBAAoB,GAAG;AACrB,WAAKR,QAAL;AACD;;AAEDS,IAAAA,MAAM,GAAG;AACP,aACE,oBAAC,eAAD,CAAiB,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGL,QAAQ,IACPR,SAAS,CAACQ,QAAD,CAAT,GAAsB,oBAAC,SAAD,oBAAe,KAAKH,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAtB,GAAsD,IAF1D,CADF;AAOD;;AA5B6C;;AA+BhD,SAAOX,OAAO,CACZD,UADY,EAEZG,YAFY,CAAP,CAGLE,kBAHK,CAAP;AAID,CApCD;;AAsCA,eAAeA,kBAAf;AAEA","sourcesContent":["// import React from 'react';\n\n// import AuthUserContext from './context';\n// import { withFirebase } from '../Firebase';\n\n// const withAuthentication = Component => {\n//   class WithAuthentication extends React.Component {\n//     constructor(props) {\n//       super(props);\n\n//       this.state = {\n//         authUser: JSON.parse(localStorage.getItem('authUser')),\n//       };\n//     }\n\n//     componentDidMount() {\n//       this.listener = this.props.firebase.onAuthUserListener(\n//         authUser => {\n//           localStorage.setItem('authUser', JSON.stringify(authUser));\n//           this.setState({ authUser });\n//         },\n//         () => {\n//           localStorage.removeItem('authUser');\n//           this.setState({ authUser: null });\n//         },\n//       );\n//     }\n\n//     componentWillUnmount() {\n//       this.listener();\n//     }\n\n//     render() {\n//       return (\n//         <AuthUserContext.Provider value={this.state.authUser}>\n//           <Component {...this.props} />\n//         </AuthUserContext.Provider>\n//       );\n//     }\n//   }\n\n//   return withFirebase(WithAuthentication);\n// };\n\n// export default withAuthentication;\n\n\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'recompose';\n\nimport AuthUserContext from './context';\nimport { withFirebase } from '../Firebase';\nimport * as ROUTES from '../../constants/routes';\nimport { withAuthentication } from '.';\n\n\n\nconst withAuthorization = condition => Component => {\n  class WithAuthorization extends React.Component {\n    componentDidMount() {\n\n      this.listener = this.props.firebase.onAuthUserListener(\n        authUser => {\n          if (!condition(authUser)) {\n            this.props.history.push(ROUTES.SIGN_IN);\n          }\n        },\n        \n        () => {this.props.history.push(ROUTES.SIGN_IN)},\n      );\n      \n\n    }\n\n    componentWillUnmount() {\n      this.listener();\n    }\n\n    render() {\n      return (\n        <AuthUserContext.Consumer>\n          {authUser =>\n            condition(authUser) ? <Component {...this.props} /> : null\n          }\n        </AuthUserContext.Consumer>\n      );\n    }\n  }\n\n  return compose(\n    withRouter,\n    withFirebase,\n  )(withAuthentication);\n};\n\nexport default withAuthentication;\n\n/*\nexport default withAuthentication;\nimport React, { useEffect } from 'react';\nimport { compose } from 'recompose';\n\nimport AuthUserContext from './context';\nimport { withFirebase } from '../Firebase';\n\n\n\n\n\n\n\n\nconst withAuthentication = Component => {\n  const WithAuthentication = (props) => {\n    const [authUser, setAuthUser] = React.useState(null);\n    const [listener, setListener] = React.useState(null);\n\n    useEffect( () => {\n      const setListener = props.firebase.auth.onAuthStateChanged(u => {u ? setAuthUser(u) : setAuthUser(null);} );\n    }, []); // \n\n    return(\n    <AuthUserContext.Provider value={authUser}>\n      <AuthUserContext.Consumer>\n        {authUser => <Component {...props} authUser={authUser}/>}\n      </AuthUserContext.Consumer>  \n    </AuthUserContext.Provider>  \n    );\n\n  }\n  return compose(withFirebase)(WithAuthentication);\n}\n\nexport default withAuthentication;\n*/"]},"metadata":{},"sourceType":"module"}